## Comandos utilizados no Git:

> HISTÓRICO

git log -> Mostrar todos os commits, começando pelo mais novo_

git log -p < file > -> Mostrar mudanças ao longo do tempo para um arquivo específico_

git blame < file > -> Mostra quem alterou o quê e quando em < file >_

  

> MUDANÇAS LOCAIS

git status -> Arquivos alterados em seu diretório de trabalho_
git digg -> Mudanças em arquivos rastreados_
git add . -> Adicione todas as mudanças atuais para o próximo commit_
git add . -p < file > -> Adicione algumas mudanças em < file > para o próximo commit_
git commit -a -> Confirmar todas as alterações locais em arquivos rastreados_
git commit -> Confirmar alterações previamente preparadas_
git commit --amend -> Mude o último commit_



> ATUALIZAR E PUBLICAR

git remote -v -> Lista todos os controles remotos configurados atualmente_
git remote show < remote > -> Mostrar informações sobre um controle remote_
git remote add < shortname > < url > -> Adicione um novo repositório remoto, denomin+ado < remote >_
git fetch < remote > -> Baixe todas as alterações de < remote >, mas não integre no HEAD_

git pull < remote > < branch > -> Baixe as alterações e marque/integre diretamente no HEAD_
git push < remote > < branch > -> Publique as alterações locais remotamente_
git branch -gh < remote/branch >**_  - _Exclua uma filial no controle remoto_
git push --tags -> Publique suas tags_
git push -> Publicar_



> DESFAZER

git reset -hard HEAD -> Descarte todas as mudanças locais em seu diretório de trabalho_
git checkout HEAD < file > -> Descarte as alterações locais em um arquivo específico_
git revert < commit > -> Reverter um commit (produzindo um novo commit com mudanças contrárias)_
git reset -hard < commit > -> Redefina o ponteiro HEAD para um commit anterior... e descarte todas as alterações desde então_
git reset < commit > -> ... e preserva todas as mudanças como mudanças não planejadas_
git reset -keep < commit > -> ... e preserva as mudanças locais não comprometidas_



> BRANCHES

git branch -av -> Listar todos os ramos existentes_
git checkout < branch > -> Mudar ramo HEAD_
git checkout < new-branch > -> Crie uma nova filial com base_
git checkout--track < remote branch > -> Crie uma nova filial com base_
git branch -d < branch > -> Deletar uma filial local_
git tag < tag-name > -> Marque o commit atual com uma tag_



> FUNDIR E REBASE

git merge < branch > -> Funda < branch > em seu HEAD atual_
git rebase < branch > -> Rebase seu HEAD atual em < branch >_
git rebase --abort -> Abortar um rebase_
git rebase --continue -> Continue um rebase após resolver os conflitos_
git mergetool -> Use a ferramenta de fusã configurada do tour para resolver conflitos_
git add < resolved-file > | git rm < resolved-file > -> Use o editor de tour para resolver conflitos manualmente e (após resolver) marcar o arquivo como resolvido_